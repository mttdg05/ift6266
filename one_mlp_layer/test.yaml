!obj:pylearn2.train.Train {
    dataset: &train !pkl: "prep_train.pkl",
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 !obj:pylearn2.models.mlp.SoftmaxPool {
                     layer_name: 'h1',
                     detector_layer_dim: 1300,
                     pool_size: 1,
                     sparse_init: 15,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 7,
                     irange: 0.
                 }
                ],
        nvis: 2304,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: .0025,
        init_momentum: 0,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !pkl: "prep_valid.pkl"
            },
   

     cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
            }, !obj:pylearn2.models.mlp.WeightDecay {
                coeffs: [ .0005, .005]
            }
            ]
        },

        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.0,
            N: 10
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "mlp_best_prep.pkl"
        }, !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
           start: 1,
           saturate: 10,
           final_momentum: .99
        }
    ]
}

